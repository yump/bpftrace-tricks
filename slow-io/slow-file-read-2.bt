#!/usr/bin/env bpftrace

// Show read()s that take longer than 500 ms:
// sudo bpftrace slow-file-read-2.bt 500000

#ifndef FILTER
#define FILTER 1
#endif

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat,
tracepoint:syscalls:sys_enter_openat2
{
  @open_arg_fn[tid] = str(args->filename);
}

tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat,
tracepoint:syscalls:sys_exit_openat2
{
  $filename = @open_arg_fn[tid];
  if (args.ret >= 0) {
    @fdmap[pid,args.ret] = $filename;
  }
}

tracepoint:syscalls:sys_enter_pread64,
tracepoint:syscalls:sys_enter_preadv,
tracepoint:syscalls:sys_enter_preadv2,
tracepoint:syscalls:sys_enter_read,
tracepoint:syscalls:sys_enter_readv
/ FILTER /
{
  @enter[tid] = (args.fd, nsecs);
}

kretfunc:vmlinux:vfs_read
/ @enter[tid].1 != 0 /
{
  $enter = @enter[tid];
  $fd = $enter.0;
  $latency_us = (nsecs - $enter.1) / 1_000;
  if ($latency_us > $1) {
    // first try to resolve full path using file descriptor
    $filename = $fd > 0 ? @fdmap[pid,$fd] : "<stdin>";
    // otherwise, use the name on the dentry
    if ($filename == "") {
      @err["path not found for fd#", comm, pid] = count();
      $d_name = args.file->f_path.dentry->d_name;
      if ($d_name.len != 0) {
        $filename = str($d_name.name);
      } else {
        @err["empty name in dentry",comm,pid] = count();
      }
    }
    @[comm,pid,$filename] = stats($latency_us);
  }
}


END {
  // don't print anything else
  clear(@open_arg_fn);
  clear(@fdmap);
  clear(@enter)
}

